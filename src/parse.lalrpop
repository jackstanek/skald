use std::str::FromStr;
use crate::ast::Expr;

grammar;

// Parse expressions.
pub Expr: Expr = {
    Literal,
}

Literal: Expr = {
    Number,
    r"(#t|#f)" => Expr::BoolExpr(<> == "#t"),
    <s:r#""[^"]*""#> => Expr::StringExpr(s[1..(s.len() - 1)].to_string()),
    Character,
}

Character: Expr = {
    r"#\\." => Expr::CharExpr(<>.chars().nth(2).unwrap()),
    r"#\\space" => Expr::CharExpr(' '),
    r"#\\newline" => Expr::CharExpr('\n'),
}

Number: Expr = {
    DecInt
}

// TODO: need to add other bases, other prefixes
DecInt: Expr = {
    <v:r"[0-9]+"> => Expr::IntExpr(i64::from_str(v).unwrap())
}
